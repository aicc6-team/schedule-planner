# 내 일정을 부탁해 - 애플리케이션 안내 가이드

## 1. 프로젝트 개요
'내 일정을 부탁해'는 할일 관리, 일정 분석, 
캘린더 연동 기능을 제공하는 웹 애플리케이션입니다. 
사용자는 할일을 추가하고, AI를 통해 일정을 분석하며, 
구글 캘린더와 연동할 수 있습니다.

## 2. 파일 구조
- `index.html`: 메인 페이지, 할일 관리 기능 제공
- `calendar.html`: 캘린더 페이지, 구글 캘린더 연동 기능 제공
- `analysis.html`: 일정 분석 페이지, 할일 분석 및 시각화 제공
- `style.css`: 전체 애플리케이션의 스타일 정의
- `script.js`: 메인 페이지 기능 구현
- `calendar.js`: 캘린더 페이지 기능 구현
- `analysis.js`: 분석 페이지 기능 구현
- `config.js`: API 키, Firebase 설정 등 구성 정보

## 3. 주요 기능

### 3.1. 할일 관리 (index.html)
- **할일 추가**: 제목, 설명, 날짜, 시간, 소요시간, 중요도 입력
- **할일 목록 관리**: 현재 할일/완료된 할일 분류, 날짜순/중요도순 정렬
- **할일 편집/삭제**: 할일 수정, 완료 처리, 삭제 기능
- **AI 일정 분석**: 향후 5일간의 일정을 시간별로 정리하고 조언 제공
- **구글 캘린더 연동**: 일정을 구글 캘린더에 자동 동기화

### 3.2. 캘린더 (calendar.html)
- **구글 캘린더 표시**: 사용자의 구글 캘린더를 iframe으로 표시
- **일정 내보내기**: 일정을 구글 캘린더로 내보내기 기능

### 3.3. 일정 분석 (analysis.html)
- **중요도 분석**: 중요도별 할일 분포 차트
- **시간대별 분석**: 시간대별 할일 분포 차트
- **완료율 분석**: 마감일 전 완료율 차트
- **트렌드 분석**: 주간/월간 할일 트렌드 차트
- **중요도-반복 매트릭스**: 일정의 중요도와 반복성 기반 분석
- **AI 조언**: AI를 통한 일정 관리 조언 기능

## 4. 기술 스택
- **프론트엔드**: HTML, CSS, JavaScript
- **데이터베이스**: Firebase Realtime Database
- **차트 시각화**: Chart.js
- **API 통합**: Google Calendar API, OpenAI API
- **인증**: Google OAuth

## 5. 설정 방법

### 5.1. Firebase 설정
1. [Firebase Console](https://console.firebase.google.com/)에서 새 프로젝트 생성
2. Realtime Database 생성 및 규칙 설정
3. 웹 앱 등록 및 SDK 구성 정보를 `config.js`에 추가

### 5.2. Google Calendar API 설정
1. [Google Cloud Console](https://console.cloud.google.com/)에서 새 프로젝트 생성
2. Google Calendar API 활성화
3. OAuth 동의 화면 구성
4. 웹 애플리케이션 유형의 OAuth 클라이언트 ID 생성
5. API 키 생성
6. 구성 정보를 `config.js`에 추가

주의사항:
- 클라이언트 ID는 반드시 '웹 애플리케이션' 유형으로 생성
- 승인된 자바스크립트 출처와 리디렉션 URI 올바르게 설정
- 'NATIVE_DESKTOP' 오류 발생 시 클라이언트 유형 확인 필수

### 5.3. OpenAI API 설정
1. [OpenAI 플랫폼](https://platform.openai.com/)에서 API 키 발급
2. 발급받은 API 키를 `config.js`의 `OPENAI_API_KEY`에 추가

## 6. 실행 방법

### 6.1. 로컬 서버 실행
가장 좋은 방법은 로컬 웹 서버를 사용하여 실행하는 것입니다:
```
npx http-server -p 5500
```
또는 Visual Studio Code의 Live Server 확장 프로그램을 사용하세요.

### 6.2. 브라우저에서 접속
웹 서버 실행 후 브라우저에서 다음 주소로 접속:
```
http://localhost:5500/
```

## 7. 문제 해결

### 7.1. 구글 API 오류
**Storagerelay URI is not allowed for 'NATIVE_DESKTOP' client type** 오류 발생 시:
1. Google Cloud Console에서 클라이언트 ID가 '웹 애플리케이션' 유형인지 확인
2. '데스크톱 앱' 유형을 사용 중이라면 '웹 애플리케이션' 유형으로 새로 생성
3. 승인된 자바스크립트 출처와 리디렉션 URI 설정 확인
4. `tokenClient` 초기화 시 `ux_mode: 'popup'` 설정 확인

### 7.2. Firebase 오류
데이터베이스 연결 오류 발생 시:
1. 브라우저 콘솔에서 오류 메시지 확인
2. Firebase 프로젝트 설정과 `config.js`의 설정 일치 여부 확인
3. Firebase 데이터베이스 규칙 확인

### 7.3. 로컬 파일 실행 오류
로컬 파일 시스템(`file://`)에서 직접 열 경우 오류 발생 시:
1. 로컬 웹 서버(http-server, Live Server 등) 사용 권장
2. 크로스 오리진 정책 오류 발생 시 브라우저 설정 확인

## 8. 커스터마이징

### 8.1. 디자인 변경
- `style.css` 파일에서 색상, 크기, 배치 등 스타일 수정
- 반응형 디자인은 `@media` 쿼리를 통해 수정 가능

### 8.2. 기능 확장
- 새로운 분석 차트: `analysis.js`에 차트 추가
- 필터링 기능: `script.js`의 `renderTodos` 함수 수정
- 구글 캘린더 통합 향상: `syncWithGoogleCalendar` 함수 수정

## 9. 주의사항
- API 키와 클라이언트 ID는 노출되지 않도록 관리
- 배포 시 API 키 제한 설정 권장
- Firebase 규칙 보안 설정 필수
- 구글 OAuth 동의 화면의 '프로덕션' 전환 시 인증 필요

## 10. 연락처
- 개발자 이메일: [개발자 이메일]
- 깃허브 저장소: [Github URL]
- 문제 보고: [Issues URL] 

function handleAuthClick() {
    console.log('인증 버튼 클릭 처리 시작');
    const calendarStatus = document.getElementById('calendarStatus');
    
    if (calendarStatus) {
        calendarStatus.textContent = "구글 계정 연결 중...";
        calendarStatus.className = "status-message info";
    }
    
    if (!tokenClient) {
        console.error('토큰 클라이언트가 초기화되지 않았습니다.');
        if (calendarStatus) {
            calendarStatus.textContent = "구글 API가 올바르게 초기화되지 않았습니다. 페이지를 새로고침하세요.";
            calendarStatus.className = "status-message error";
        }
        return;
    }
    
    try {
        console.log('액세스 토큰 요청 시작');
        tokenClient.requestAccessToken({
            prompt: '',  // 이 부분 변경
            login_hint: ''
        });
        console.log('액세스 토큰 요청 완료');
    } catch (error) {
        console.error('구글 인증 중 오류 발생:', error);
        if (calendarStatus) {
            calendarStatus.textContent = `구글 인증 중 오류: ${error.message}`;
            calendarStatus.className = "status-message error";
        }
    }
} 